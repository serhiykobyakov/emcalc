#!/usr/bin/python3

__version__ = '16.11.2022'
__author__ = 'Serhiy Kobyakov'

import wx
from scipy.constants import h as the_h
from scipy.constants import c as the_c
from scipy.constants import e as the_e
import math


class FloatTextCtrl(wx.TextCtrl):
    # TextCtrl which accepts valid floats only (simple numbers, no scientific notation)
    # you can safely make floats from the string without risk to crash the application
    def __init__(self, parent, id=wx.ID_ANY, value="", pos=wx.DefaultPosition, size=wx.DefaultSize, style=0,
                 validator=wx.DefaultValidator, name=wx.TextCtrlNameStr):
        wx.TextCtrl.__init__(self, parent=parent, id=id, value=value, size=size, style=style)
        self.Bind(wx.EVT_KEY_DOWN, lambda event: self.catch_comma(event))
        self.Bind(wx.EVT_CHAR, lambda event: self.filter_num_and_control(event))

    def catch_comma(self, event):
        # substitute dot for comma so there would be no problems with calculations later
        key_code = event.GetKeyCode()

        if key_code == ord(','):
            if not '.' in self.GetLineText(0):
                keyinput = wx.UIActionSimulator()
                keyinput.Char(ord('.'))
        else:
            event.Skip()

    def filter_num_and_control(self, event):
        # filter out inputs which are not numeric or widget controls
        key_raw_value = self.GetValue().strip()
        key_code = event.GetKeyCode()
        # print(f'raw: {key_raw_value}, key code: {key_code}, char: {chr(key_code)}')
        if 0 <= key_code <= 7:
            pass
        elif 8 <= key_code <= 9:
            event.Skip()
        elif 10 <= key_code <= 26:
            pass
        elif key_code == 27:  # ESC
            event.Skip()
        elif 28 <= key_code <= 45:
            pass
        elif key_code == 46:  # .
            if not '.' in key_raw_value:
                event.Skip()
        elif key_code == 47:  # /
            pass
        elif 48 <= key_code <= 57:  # 0..9
            if str_is_float(key_raw_value + chr(key_code)):
                if float(key_raw_value + chr(key_code)) >= 0:
                    self.SetModified(True)
                    event.Skip()
        elif 58 <= key_code <= 126:
            pass
        elif key_code == 127:  # DEL
            event.Skip()
        elif 128 <= key_code <= 255:
            pass
        else:
            event.Skip()


class LcalcFrame(wx.Frame):
    def __init__(self, parent, title):
        super().__init__(parent, title=title, style=wx.DEFAULT_FRAME_STYLE ^ wx.RESIZE_BORDER)

        # set the application icon
        icon = wx.Icon()
        icon.CopyFromBitmap(wx.Bitmap("emcalc.ico", wx.BITMAP_TYPE_ANY))
        self.SetIcon(icon)

        # make the main panel and increase system font 2 times for it
        self.the_panel = wx.Panel(self, wx.ID_ANY)
        systemfont = wx.SystemSettings.GetFont(wx.SYS_DEFAULT_GUI_FONT)
        self.the_panel.SetFont(systemfont.Scale(2))

        # create statusbar
        self.status_bar = self.CreateStatusBar(1)

        labelcm = wx.StaticText(self.the_panel, id=wx.ID_ANY, label=u'cm\u207b\u00b9')
        label_h_size, label_v_size = labelcm.GetTextExtent(labelcm.GetLabel())

        top_sizer = wx.BoxSizer(wx.VERTICAL)
        nm_sizer = wx.BoxSizer(wx.HORIZONTAL)
        cm_sizer = wx.BoxSizer(wx.HORIZONTAL)
        ev_sizer = wx.BoxSizer(wx.HORIZONTAL)

        # the nm row:
        self.edit_nm = FloatTextCtrl(self.the_panel, style=wx.TE_RIGHT, size=(8 * label_v_size, label_v_size))
        labelnm = wx.StaticText(self.the_panel, id=wx.ID_ANY, label='nm', size=(label_h_size, label_v_size))
        nm_sizer.Add(self.edit_nm, 1, wx.ALL | wx.EXPAND, 3)
        nm_sizer.Add(labelnm, 0, wx.ALL, 3)

        # the cm-1 row:
        self.edit_cm = FloatTextCtrl(self.the_panel, style=wx.TE_RIGHT, size=(8 * label_v_size, label_v_size))
        cm_sizer.Add(self.edit_cm, 1, wx.ALL | wx.EXPAND, 3)
        cm_sizer.Add(labelcm, 0, wx.ALL, 3)

        # the eV row:
        self.edit_ev = FloatTextCtrl(self.the_panel, style=wx.TE_RIGHT, size=(8 * label_v_size, label_v_size))
        labelev = wx.StaticText(self.the_panel, id=wx.ID_ANY, label='eV', size=(label_h_size, label_v_size))
        ev_sizer.Add(self.edit_ev, 1, wx.ALL | wx.EXPAND, 3)
        ev_sizer.Add(labelev, 0, wx.ALL, 3)

        top_sizer.Add(nm_sizer, 0, wx.EXPAND)
        top_sizer.Add(cm_sizer, 0, wx.EXPAND)
        top_sizer.Add(ev_sizer, 0, wx.EXPAND)

        # set the size of the window
        self.the_panel.SetSizer(top_sizer)
        top_sizer.Fit(self)

        self.Bind(wx.EVT_CHAR_HOOK, self.on_escape)

        self.edit_nm.Bind(wx.EVT_KEY_UP, self.show_values)
        self.edit_cm.Bind(wx.EVT_KEY_UP, self.show_values)
        self.edit_ev.Bind(wx.EVT_KEY_UP, self.show_values)

        self.edit_nm.Bind(wx.EVT_TEXT, self.show_range)

    def on_escape(self, event):
        # quit application if ESC pressed
        key_code = event.GetKeyCode()
        if key_code == wx.WXK_ESCAPE:
            self.Close()
        event.Skip()

    def show_range(self, event):
        # show hint in status bar
        the_obj = event.GetEventObject()
        if len(the_obj.GetLineText(0)) > 0:
            val = float(the_obj.GetLineText(0))
            if val < 10:
                self.status_bar.SetStatusText('')
            elif 10 <= val < 100:
                self.status_bar.SetStatusText('Extreme ultraviolet (E-UV)')
            elif 100 <= val < 280:
                self.status_bar.SetStatusText('Ultraviolet (UV-C)')
            elif 280 <= val < 315:
                self.status_bar.SetStatusText('Ultraviolet (UV-B)')
            elif 315 <= val < 380:
                self.status_bar.SetStatusText('Ultraviolet (UV-A)')
            elif 380 <= val < 780:
                self.status_bar.SetStatusText('Visible light')
            elif 780 <= val < 1400:
                self.status_bar.SetStatusText('Near infrared (IR-A)')
            elif 1400 <= val < 3000:
                self.status_bar.SetStatusText('Short-wavelength infrared (IR-B)')
            elif 3000 <= val < 8000:
                self.status_bar.SetStatusText('Mid-wavelength infrared (IR-C)')
            elif 8000 <= val < 15000:
                self.status_bar.SetStatusText('Long-wavelength infrared (IR-C)')
            elif 15_000 <= val < 1000_000:
                self.status_bar.SetStatusText('Far infrared (IR-C)')
            elif 1000_000 <= val < 10_000_000:
                self.status_bar.SetStatusText('Microwaves, Extremely high frequency (EHF)')
            elif 10_000_000 <= val < 100_000_000:
                self.status_bar.SetStatusText('Microwaves, Super high frequency (SHF)')
            elif 100_000_000 <= val < 1000_000_000:
                self.status_bar.SetStatusText('Microwaves, Ultra high frequency (UHF)')
            elif 1000_000_000 <= val < 10_000_000_000:
                self.status_bar.SetStatusText('Radio waves, Very high frequency (VHF)')
            elif 10_000_000_000 <= val < 100_000_000_000:
                self.status_bar.SetStatusText('Radio waves, High frequency (HF)')
            elif 100_000_000_000 <= val < 1000_000_000_000:
                self.status_bar.SetStatusText('Radio waves, Medium frequency (MF)')
            elif 1000_000_000_000 <= val < 10_000_000_000_000:
                self.status_bar.SetStatusText('Radio waves, Low frequency (LF)')
            elif 10_000_000_000_000 <= val < 100_000_000_000_000:
                self.status_bar.SetStatusText('Radio waves, Very low frequency (VLF)')
            elif 1000_000_000_000_000 <= val < 10_000_000_000_000_000:
                self.status_bar.SetStatusText('Radio waves, Super low frequency (SLF)')
            elif 10_000_000_000_000_000 <= val < 100_000_000_000_000_000:
                self.status_bar.SetStatusText('Radio waves, Extremely low frequency (ELF)')
            elif val >= 100_000_000_000_000_000:
                self.status_bar.SetStatusText('')

    def show_values(self, event):
        # do the math and show results in other text controls
        if self.edit_nm.IsModified():
            if len(self.edit_nm.GetLineText(0)) > 0:
                self.edit_cm.SetValue(nm_to_cm(self.edit_nm.GetLineText(0)))
                self.edit_ev.SetValue(nm_to_ev(self.edit_nm.GetLineText(0)))
            self.edit_nm.SetModified(False)

        if self.edit_cm.IsModified():
            if len(self.edit_cm.GetLineText(0)) > 0:
                self.edit_nm.SetValue(cm_to_nm(self.edit_cm.GetLineText(0)))
                self.edit_ev.SetValue(cm_to_ev(self.edit_cm.GetLineText(0)))
            self.edit_cm.SetModified(False)

        if self.edit_ev.IsModified():
            if len(self.edit_ev.GetLineText(0)) > 0:
                self.edit_nm.SetValue(ev_to_nm(self.edit_ev.GetLineText(0)))
                self.edit_cm.SetValue(ev_to_cm(self.edit_ev.GetLineText(0)))
            self.edit_ev.SetModified(False)


def str_is_float(the_str: str) -> bool:
    try:
        float(the_str)
        return True
    except ValueError:
        return False


def get_round_unc(the_val: str) -> float:
    # get the rounding uncertainty from the float which is in string variable
    if '.' in the_val:
        digits = len(the_val) - the_val.index('.') - 1
    else:
        digits = 0
    return pow(10, -digits) * 0.5


def round_value(the_val, the_unc: float) -> str:
    # round the_val to the same place as two significant figures of the_unc
    dec_place = 1 - int(math.floor(math.log10(the_unc)))
    if dec_place < 0:
        dec_place = 0
    return '{1:.{0}f}'.format(dec_place, the_val)


def nm_to_cm(the_nm_val: str) -> str:
    # convert nm to cm^-1
    the_value = 1e7 / float(the_nm_val)
    the_unc = 1e7 * get_round_unc(the_nm_val) / (float(the_nm_val) ** 2)
    return round_value(the_value, the_unc)


def nm_to_ev(the_nm_val: str) -> str:
    # convert nm to eV
    scale = the_h * the_c / (1e-9 * the_e)
    the_value = scale / float(the_nm_val)
    the_unc = scale * get_round_unc(the_nm_val) / (float(the_nm_val) ** 2)
    return round_value(the_value, the_unc)


def cm_to_nm(the_cm_val: str) -> str:
    # convert cm^-1 to nm
    the_value = 1e7 / float(the_cm_val)
    the_unc = 1e7 * get_round_unc(the_cm_val) / (float(the_cm_val) ** 2)
    return round_value(the_value, the_unc)


def cm_to_ev(the_cm_val: str) -> str:
    # convert cm^-1 to eV
    scale = the_h * the_c / (1e-2 * the_e)
    the_value = scale * float(the_cm_val)
    the_unc = scale * get_round_unc(the_cm_val)
    return round_value(the_value, the_unc)


def ev_to_nm(the_ev_val: str) -> str:
    # convert eV to nm
    scale = the_h * the_c / (1e-9 * the_e)
    the_value = scale / float(the_ev_val)
    the_unc = scale * get_round_unc(the_ev_val) / (float(the_ev_val) ** 2)
    return round_value(the_value, the_unc)


def ev_to_cm(the_ev_val: str) -> str:
    # convert eV to cm^-1
    scale = 1e-2 * the_e / (the_h * the_c)
    the_value = scale * float(the_ev_val)
    the_unc = scale * get_round_unc(the_ev_val)
    return round_value(the_value, the_unc)


if __name__ == "__main__":
    app = wx.App()

    frame = LcalcFrame(None, "EMcalc")
    frame.Show()

    app.MainLoop()
